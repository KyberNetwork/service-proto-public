// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: onchainprice/v1/service.proto

package onchainpricev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListPricesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPricesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPricesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPricesRequestMultiError, or nil if none found.
func (m *ListPricesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPricesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetTokens()); l < 1 || l > 100 {
		err := ListPricesRequestValidationError{
			field:  "Tokens",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetQuotes()); l < 1 || l > 100 {
		err := ListPricesRequestValidationError{
			field:  "Quotes",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Debug

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPricesRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPricesRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPricesRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPricesRequestMultiError(errors)
	}

	return nil
}

// ListPricesRequestMultiError is an error wrapping multiple validation errors
// returned by ListPricesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPricesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPricesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPricesRequestMultiError) AllErrors() []error { return m }

// ListPricesRequestValidationError is the validation error returned by
// ListPricesRequest.Validate if the designated constraints aren't met.
type ListPricesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPricesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPricesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPricesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPricesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPricesRequestValidationError) ErrorName() string {
	return "ListPricesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPricesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPricesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPricesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPricesRequestValidationError{}

// Validate checks the field values on ListPricesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPricesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPricesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPricesResponseMultiError, or nil if none found.
func (m *ListPricesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPricesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPricesResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPricesResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPricesResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPricesResponseMultiError(errors)
	}

	return nil
}

// ListPricesResponseMultiError is an error wrapping multiple validation errors
// returned by ListPricesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPricesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPricesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPricesResponseMultiError) AllErrors() []error { return m }

// ListPricesResponseValidationError is the validation error returned by
// ListPricesResponse.Validate if the designated constraints aren't met.
type ListPricesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPricesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPricesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPricesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPricesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPricesResponseValidationError) ErrorName() string {
	return "ListPricesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPricesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPricesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPricesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPricesResponseValidationError{}

// Validate checks the field values on ListPricesResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPricesResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPricesResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPricesResultMultiError, or nil if none found.
func (m *ListPricesResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPricesResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPricesResultValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPricesResultValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPricesResultValidationError{
					field:  fmt.Sprintf("Prices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPricesResultMultiError(errors)
	}

	return nil
}

// ListPricesResultMultiError is an error wrapping multiple validation errors
// returned by ListPricesResult.ValidateAll() if the designated constraints
// aren't met.
type ListPricesResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPricesResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPricesResultMultiError) AllErrors() []error { return m }

// ListPricesResultValidationError is the validation error returned by
// ListPricesResult.Validate if the designated constraints aren't met.
type ListPricesResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPricesResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPricesResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPricesResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPricesResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPricesResultValidationError) ErrorName() string { return "ListPricesResultValidationError" }

// Error satisfies the builtin error interface
func (e ListPricesResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPricesResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPricesResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPricesResultValidationError{}

// Validate checks the field values on PriceInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PriceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PriceInfoMultiError, or nil
// if none found.
func (m *PriceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	for idx, item := range m.GetBuy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PriceInfoValidationError{
						field:  fmt.Sprintf("Buy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PriceInfoValidationError{
						field:  fmt.Sprintf("Buy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PriceInfoValidationError{
					field:  fmt.Sprintf("Buy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSell() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PriceInfoValidationError{
						field:  fmt.Sprintf("Sell[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PriceInfoValidationError{
						field:  fmt.Sprintf("Sell[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PriceInfoValidationError{
					field:  fmt.Sprintf("Sell[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PriceInfoMultiError(errors)
	}

	return nil
}

// PriceInfoMultiError is an error wrapping multiple validation errors returned
// by PriceInfo.ValidateAll() if the designated constraints aren't met.
type PriceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceInfoMultiError) AllErrors() []error { return m }

// PriceInfoValidationError is the validation error returned by
// PriceInfo.Validate if the designated constraints aren't met.
type PriceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceInfoValidationError) ErrorName() string { return "PriceInfoValidationError" }

// Error satisfies the builtin error interface
func (e PriceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceInfoValidationError{}

// Validate checks the field values on PriceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PriceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PriceDetailMultiError, or
// nil if none found.
func (m *PriceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Quote

	// no validation rules for PriceByQuote

	// no validation rules for UpdatedAt

	// no validation rules for AmountOut

	if len(errors) > 0 {
		return PriceDetailMultiError(errors)
	}

	return nil
}

// PriceDetailMultiError is an error wrapping multiple validation errors
// returned by PriceDetail.ValidateAll() if the designated constraints aren't met.
type PriceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceDetailMultiError) AllErrors() []error { return m }

// PriceDetailValidationError is the validation error returned by
// PriceDetail.Validate if the designated constraints aren't met.
type PriceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceDetailValidationError) ErrorName() string { return "PriceDetailValidationError" }

// Error satisfies the builtin error interface
func (e PriceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceDetailValidationError{}

// Validate checks the field values on GetPriceUSDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPriceUSDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPriceUSDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPriceUSDRequestMultiError, or nil if none found.
func (m *GetPriceUSDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPriceUSDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetPriceUSDRequest_Address_Pattern.MatchString(m.GetAddress()) {
		err := GetPriceUSDRequestValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^0x[0-9a-fA-F]{40}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPriceUSDRequestMultiError(errors)
	}

	return nil
}

// GetPriceUSDRequestMultiError is an error wrapping multiple validation errors
// returned by GetPriceUSDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPriceUSDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPriceUSDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPriceUSDRequestMultiError) AllErrors() []error { return m }

// GetPriceUSDRequestValidationError is the validation error returned by
// GetPriceUSDRequest.Validate if the designated constraints aren't met.
type GetPriceUSDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPriceUSDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPriceUSDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPriceUSDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPriceUSDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPriceUSDRequestValidationError) ErrorName() string {
	return "GetPriceUSDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPriceUSDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPriceUSDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPriceUSDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPriceUSDRequestValidationError{}

var _GetPriceUSDRequest_Address_Pattern = regexp.MustCompile("^0x[0-9a-fA-F]{40}$")

// Validate checks the field values on GetPriceUSDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPriceUSDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPriceUSDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPriceUSDResponseMultiError, or nil if none found.
func (m *GetPriceUSDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPriceUSDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Symbol

	// no validation rules for Price

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetPriceUSDResponseMultiError(errors)
	}

	return nil
}

// GetPriceUSDResponseMultiError is an error wrapping multiple validation
// errors returned by GetPriceUSDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPriceUSDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPriceUSDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPriceUSDResponseMultiError) AllErrors() []error { return m }

// GetPriceUSDResponseValidationError is the validation error returned by
// GetPriceUSDResponse.Validate if the designated constraints aren't met.
type GetPriceUSDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPriceUSDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPriceUSDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPriceUSDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPriceUSDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPriceUSDResponseValidationError) ErrorName() string {
	return "GetPriceUSDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPriceUSDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPriceUSDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPriceUSDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPriceUSDResponseValidationError{}

// Validate checks the field values on ListSupportedQuotesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSupportedQuotesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSupportedQuotesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSupportedQuotesResponseMultiError, or nil if none found.
func (m *ListSupportedQuotesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSupportedQuotesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSupportedQuotesResponseMultiError(errors)
	}

	return nil
}

// ListSupportedQuotesResponseMultiError is an error wrapping multiple
// validation errors returned by ListSupportedQuotesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSupportedQuotesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSupportedQuotesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSupportedQuotesResponseMultiError) AllErrors() []error { return m }

// ListSupportedQuotesResponseValidationError is the validation error returned
// by ListSupportedQuotesResponse.Validate if the designated constraints
// aren't met.
type ListSupportedQuotesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSupportedQuotesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSupportedQuotesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSupportedQuotesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSupportedQuotesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSupportedQuotesResponseValidationError) ErrorName() string {
	return "ListSupportedQuotesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSupportedQuotesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSupportedQuotesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSupportedQuotesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSupportedQuotesResponseValidationError{}

// Validate checks the field values on ListHistoricalPricesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistoricalPricesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistoricalPricesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistoricalPricesRequestMultiError, or nil if none found.
func (m *ListHistoricalPricesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistoricalPricesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetTokens()); l < 1 || l > 100 {
		err := ListHistoricalPricesRequestValidationError{
			field:  "Tokens",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListHistoricalPricesRequest_Quote_Pattern.MatchString(m.GetQuote()) {
		err := ListHistoricalPricesRequestValidationError{
			field:  "Quote",
			reason: "value does not match regex pattern \"^0x[0-9A-Za-z]{40}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ListHistoricalPricesRequestMultiError(errors)
	}

	return nil
}

// ListHistoricalPricesRequestMultiError is an error wrapping multiple
// validation errors returned by ListHistoricalPricesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListHistoricalPricesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistoricalPricesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistoricalPricesRequestMultiError) AllErrors() []error { return m }

// ListHistoricalPricesRequestValidationError is the validation error returned
// by ListHistoricalPricesRequest.Validate if the designated constraints
// aren't met.
type ListHistoricalPricesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoricalPricesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoricalPricesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoricalPricesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoricalPricesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoricalPricesRequestValidationError) ErrorName() string {
	return "ListHistoricalPricesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoricalPricesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoricalPricesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoricalPricesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoricalPricesRequestValidationError{}

var _ListHistoricalPricesRequest_Quote_Pattern = regexp.MustCompile("^0x[0-9A-Za-z]{40}$")

// Validate checks the field values on ListHistoricalPricesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistoricalPricesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistoricalPricesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistoricalPricesResponseMultiError, or nil if none found.
func (m *ListHistoricalPricesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistoricalPricesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListHistoricalPricesResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListHistoricalPricesResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHistoricalPricesResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListHistoricalPricesResponseMultiError(errors)
	}

	return nil
}

// ListHistoricalPricesResponseMultiError is an error wrapping multiple
// validation errors returned by ListHistoricalPricesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListHistoricalPricesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistoricalPricesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistoricalPricesResponseMultiError) AllErrors() []error { return m }

// ListHistoricalPricesResponseValidationError is the validation error returned
// by ListHistoricalPricesResponse.Validate if the designated constraints
// aren't met.
type ListHistoricalPricesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoricalPricesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoricalPricesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoricalPricesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoricalPricesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoricalPricesResponseValidationError) ErrorName() string {
	return "ListHistoricalPricesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoricalPricesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoricalPricesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoricalPricesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoricalPricesResponseValidationError{}

// Validate checks the field values on ListHistoricalPricesResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistoricalPricesResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistoricalPricesResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistoricalPricesResultMultiError, or nil if none found.
func (m *ListHistoricalPricesResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistoricalPricesResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHistoricalPricesResultValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHistoricalPricesResultValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHistoricalPricesResultValidationError{
					field:  fmt.Sprintf("Prices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHistoricalPricesResultMultiError(errors)
	}

	return nil
}

// ListHistoricalPricesResultMultiError is an error wrapping multiple
// validation errors returned by ListHistoricalPricesResult.ValidateAll() if
// the designated constraints aren't met.
type ListHistoricalPricesResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistoricalPricesResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistoricalPricesResultMultiError) AllErrors() []error { return m }

// ListHistoricalPricesResultValidationError is the validation error returned
// by ListHistoricalPricesResult.Validate if the designated constraints aren't met.
type ListHistoricalPricesResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoricalPricesResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoricalPricesResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoricalPricesResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoricalPricesResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoricalPricesResultValidationError) ErrorName() string {
	return "ListHistoricalPricesResultValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoricalPricesResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoricalPricesResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoricalPricesResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoricalPricesResultValidationError{}

// Validate checks the field values on ListHistoricalItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistoricalItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistoricalItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistoricalItemMultiError, or nil if none found.
func (m *ListHistoricalItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistoricalItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHistoricalItemValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHistoricalItemValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHistoricalItemValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHistoricalItemMultiError(errors)
	}

	return nil
}

// ListHistoricalItemMultiError is an error wrapping multiple validation errors
// returned by ListHistoricalItem.ValidateAll() if the designated constraints
// aren't met.
type ListHistoricalItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistoricalItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistoricalItemMultiError) AllErrors() []error { return m }

// ListHistoricalItemValidationError is the validation error returned by
// ListHistoricalItem.Validate if the designated constraints aren't met.
type ListHistoricalItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoricalItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoricalItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoricalItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoricalItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoricalItemValidationError) ErrorName() string {
	return "ListHistoricalItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoricalItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoricalItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoricalItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoricalItemValidationError{}

// Validate checks the field values on ListHistoricalItem_PriceValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistoricalItem_PriceValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistoricalItem_PriceValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListHistoricalItem_PriceValueMultiError, or nil if none found.
func (m *ListHistoricalItem_PriceValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistoricalItem_PriceValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Price

	// no validation rules for Quote

	// no validation rules for Type

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ListHistoricalItem_PriceValueMultiError(errors)
	}

	return nil
}

// ListHistoricalItem_PriceValueMultiError is an error wrapping multiple
// validation errors returned by ListHistoricalItem_PriceValue.ValidateAll()
// if the designated constraints aren't met.
type ListHistoricalItem_PriceValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistoricalItem_PriceValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistoricalItem_PriceValueMultiError) AllErrors() []error { return m }

// ListHistoricalItem_PriceValueValidationError is the validation error
// returned by ListHistoricalItem_PriceValue.Validate if the designated
// constraints aren't met.
type ListHistoricalItem_PriceValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoricalItem_PriceValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoricalItem_PriceValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoricalItem_PriceValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoricalItem_PriceValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoricalItem_PriceValueValidationError) ErrorName() string {
	return "ListHistoricalItem_PriceValueValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoricalItem_PriceValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoricalItem_PriceValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoricalItem_PriceValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoricalItem_PriceValueValidationError{}
