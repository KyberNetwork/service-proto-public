// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: onchainprice/v1/service.proto

package onchainpricev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnchainPriceService_ListPrices_FullMethodName           = "/onchainprice.v1.OnchainPriceService/ListPrices"
	OnchainPriceService_ListHistoricalPrices_FullMethodName = "/onchainprice.v1.OnchainPriceService/ListHistoricalPrices"
	OnchainPriceService_GetPriceUSD_FullMethodName          = "/onchainprice.v1.OnchainPriceService/GetPriceUSD"
	OnchainPriceService_ListSupportedQuotes_FullMethodName  = "/onchainprice.v1.OnchainPriceService/ListSupportedQuotes"
)

// OnchainPriceServiceClient is the client API for OnchainPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OnchainPriceService is a service which provide API for getting data relevant token price.
type OnchainPriceServiceClient interface {
	// TODO: should change `ListPrices` to `ListLatestPrices` or add timepstamp into request as flag for getting latest price or historical price.
	// ListPrices will send a list of ids and server will return the prices.
	ListPrices(ctx context.Context, in *ListPricesRequest, opts ...grpc.CallOption) (*ListPricesResponse, error)
	// ListHistoricalPrices will send a list of ids,timestamp and quote and server will return the historical prices.
	ListHistoricalPrices(ctx context.Context, in *ListHistoricalPricesRequest, opts ...grpc.CallOption) (*ListHistoricalPricesResponse, error)
	// GetPriceUSD will send a token address and server will return the price in USD.
	GetPriceUSD(ctx context.Context, in *GetPriceUSDRequest, opts ...grpc.CallOption) (*GetPriceUSDResponse, error)
	// ListSupportedQuotes will return a list of supported quotes.
	ListSupportedQuotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSupportedQuotesResponse, error)
}

type onchainPriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnchainPriceServiceClient(cc grpc.ClientConnInterface) OnchainPriceServiceClient {
	return &onchainPriceServiceClient{cc}
}

func (c *onchainPriceServiceClient) ListPrices(ctx context.Context, in *ListPricesRequest, opts ...grpc.CallOption) (*ListPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPricesResponse)
	err := c.cc.Invoke(ctx, OnchainPriceService_ListPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onchainPriceServiceClient) ListHistoricalPrices(ctx context.Context, in *ListHistoricalPricesRequest, opts ...grpc.CallOption) (*ListHistoricalPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoricalPricesResponse)
	err := c.cc.Invoke(ctx, OnchainPriceService_ListHistoricalPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onchainPriceServiceClient) GetPriceUSD(ctx context.Context, in *GetPriceUSDRequest, opts ...grpc.CallOption) (*GetPriceUSDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceUSDResponse)
	err := c.cc.Invoke(ctx, OnchainPriceService_GetPriceUSD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onchainPriceServiceClient) ListSupportedQuotes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSupportedQuotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSupportedQuotesResponse)
	err := c.cc.Invoke(ctx, OnchainPriceService_ListSupportedQuotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnchainPriceServiceServer is the server API for OnchainPriceService service.
// All implementations must embed UnimplementedOnchainPriceServiceServer
// for forward compatibility.
//
// OnchainPriceService is a service which provide API for getting data relevant token price.
type OnchainPriceServiceServer interface {
	// TODO: should change `ListPrices` to `ListLatestPrices` or add timepstamp into request as flag for getting latest price or historical price.
	// ListPrices will send a list of ids and server will return the prices.
	ListPrices(context.Context, *ListPricesRequest) (*ListPricesResponse, error)
	// ListHistoricalPrices will send a list of ids,timestamp and quote and server will return the historical prices.
	ListHistoricalPrices(context.Context, *ListHistoricalPricesRequest) (*ListHistoricalPricesResponse, error)
	// GetPriceUSD will send a token address and server will return the price in USD.
	GetPriceUSD(context.Context, *GetPriceUSDRequest) (*GetPriceUSDResponse, error)
	// ListSupportedQuotes will return a list of supported quotes.
	ListSupportedQuotes(context.Context, *emptypb.Empty) (*ListSupportedQuotesResponse, error)
	mustEmbedUnimplementedOnchainPriceServiceServer()
}

// UnimplementedOnchainPriceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnchainPriceServiceServer struct{}

func (UnimplementedOnchainPriceServiceServer) ListPrices(context.Context, *ListPricesRequest) (*ListPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrices not implemented")
}
func (UnimplementedOnchainPriceServiceServer) ListHistoricalPrices(context.Context, *ListHistoricalPricesRequest) (*ListHistoricalPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoricalPrices not implemented")
}
func (UnimplementedOnchainPriceServiceServer) GetPriceUSD(context.Context, *GetPriceUSDRequest) (*GetPriceUSDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceUSD not implemented")
}
func (UnimplementedOnchainPriceServiceServer) ListSupportedQuotes(context.Context, *emptypb.Empty) (*ListSupportedQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedQuotes not implemented")
}
func (UnimplementedOnchainPriceServiceServer) mustEmbedUnimplementedOnchainPriceServiceServer() {}
func (UnimplementedOnchainPriceServiceServer) testEmbeddedByValue()                             {}

// UnsafeOnchainPriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnchainPriceServiceServer will
// result in compilation errors.
type UnsafeOnchainPriceServiceServer interface {
	mustEmbedUnimplementedOnchainPriceServiceServer()
}

func RegisterOnchainPriceServiceServer(s grpc.ServiceRegistrar, srv OnchainPriceServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnchainPriceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnchainPriceService_ServiceDesc, srv)
}

func _OnchainPriceService_ListPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnchainPriceServiceServer).ListPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnchainPriceService_ListPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnchainPriceServiceServer).ListPrices(ctx, req.(*ListPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnchainPriceService_ListHistoricalPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoricalPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnchainPriceServiceServer).ListHistoricalPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnchainPriceService_ListHistoricalPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnchainPriceServiceServer).ListHistoricalPrices(ctx, req.(*ListHistoricalPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnchainPriceService_GetPriceUSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceUSDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnchainPriceServiceServer).GetPriceUSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnchainPriceService_GetPriceUSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnchainPriceServiceServer).GetPriceUSD(ctx, req.(*GetPriceUSDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnchainPriceService_ListSupportedQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnchainPriceServiceServer).ListSupportedQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnchainPriceService_ListSupportedQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnchainPriceServiceServer).ListSupportedQuotes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OnchainPriceService_ServiceDesc is the grpc.ServiceDesc for OnchainPriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnchainPriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onchainprice.v1.OnchainPriceService",
	HandlerType: (*OnchainPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrices",
			Handler:    _OnchainPriceService_ListPrices_Handler,
		},
		{
			MethodName: "ListHistoricalPrices",
			Handler:    _OnchainPriceService_ListHistoricalPrices_Handler,
		},
		{
			MethodName: "GetPriceUSD",
			Handler:    _OnchainPriceService_GetPriceUSD_Handler,
		},
		{
			MethodName: "ListSupportedQuotes",
			Handler:    _OnchainPriceService_ListSupportedQuotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onchainprice/v1/service.proto",
}
